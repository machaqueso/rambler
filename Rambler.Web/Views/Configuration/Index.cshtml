@{
    ViewData["Title"] = "Configuration";
}

<link rel="import" href="~/components/xenon-photo-card/xenon-photo-card.html" />
<link rel="import" href="~/components/paper-toast/paper-toast.html" />
<link rel="import" href="~/components/iron-ajax/iron-ajax.html" />
<link rel="import" href="~/components/rambler-components/rambler-integrations.html" />
<link rel="import" href="~/components/iron-icons/editor-icons.html" />
<link rel="import" href="~/components/xenon-layout/xenon-dialog.html" />

<dom-module id="rambler-setting-select">
    <template>

        <iron-ajax id="settingNames"
                   auto
                   url="/api/configuration/names"
                   handle-as="json"
                   loading="{{loading}}"
                   last-response="{{settingNames}}"
                   on-response="_onSettingNamesLoaded"
                   debounce-duration="300">
        </iron-ajax>

        <select id="settingName" on-change="_onSettingNameChanged">
            <template is="dom-repeat" items="[[settingNames]]">
                <option value="{{item}}">[[item]]</option>
            </template>
        </select>
    </template>

    <script>
        addEventListener('WebComponentsReady',
            function () {
                Polymer({
                    is: "rambler-setting-select",
                    properties: {
                        settingNames: { type: Array, notify: true, value: [] }
                    },
                    observers: [
                    ],
                    _onSettingNamesLoaded: function () {
                        var _this = this;
                        setTimeout(function () {
                            _this.fire("settingsLoaded", _this.$.settingName.value);
                        }, 1000);
                    },
                    _onSettingNameChanged: function (e) {
                        this.fire('settingSelected', this.$.settingName.value);
                    },
                    _onError: function (e) {
                        this.$.toast.text = "ERROR: " + e.detail.request.xhr.response;
                        this.$.toast.show();

                        //this.set("errorMessage", e.detail.request.xhr.response);
                    },
                    ready: function () {
                    }
                });
            })
    </script>

</dom-module>


<dom-module id="page-module">
    <template>
        <style is="custom-style">
            paper-icon-button {
                padding: 0;
                width: 20px;
                height: 20px;
            }
        </style>

        <iron-ajax id="ajax"
                   auto
                   url="/api/configuration"
                   handle-as="json"
                   loading="{{loading}}"
                   last-response="{{settings}}"
                   debounce-duration="300">
        </iron-ajax>

        <iron-ajax id="addSetting"
                   method="POST"
                   url="/api/configuration"
                   handle-as="json"
                   content-type="application/json"
                   loading="{{loading}}"
                   on-error="_onError"
                   on-response="_onCreate"
                   debounce-duration="300">
        </iron-ajax>

        <iron-ajax id="putSetting"
                   handle-as="json"
                   content-type="application/json"
                   loading="{{loading}}"
                   method="PUT"
                   on-response="_onUpdate"
                   on-error="_onError"
                   debounce-duration="300">
        </iron-ajax>

        <iron-ajax id="deleteSetting"
                   handle-as="json"
                   content-type="application/json"
                   loading="{{loading}}"
                   method="DELETE"
                   on-response="_onDelete"
                   on-error="_onError"
                   debounce-duration="300">
        </iron-ajax>

        <xenon-photo-card heading="Enable/Disable Integrations">
            <main>
                <rambler-integrations></rambler-integrations>
            </main>
        </xenon-photo-card>

        <xenon-photo-card heading="Configuration Settings">
            <main>
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                            <th>Value</th>
                            <th>Configured?</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <template is="dom-repeat" items="{{settings}}">
                            <tr>
                                <td>{{item.id}}</td>
                                <td>{{item.key}}</td>
                                <td>
                                    [[_maskedValue(item)]]
                                </td>
                                <td>{{item.status}}</td>
                                <td>
                                    <paper-icon-button icon="editor:mode-edit" on-click="_openEditor"></paper-icon-button>
                                    <paper-icon-button icon="icons:delete" on-click="_delete"></paper-icon-button>
                                </td>
                            </tr>
                        </template>
                        <tr>
                            <td>New</td>
                            <td>
                                <rambler-setting-select></rambler-setting-select>
                            </td>
                            <td>
                                <paper-input type="password" value="{{setting.value}}" hidden$="[[!hidePasswordInput]]"></paper-input>
                                <paper-input type="text" value="{{setting.value}}" hidden$="[[hidePasswordInput]]"></paper-input>
                            </td>
                            <td>New</td>
                            <td>
                                <paper-icon-button icon="icons:add" on-click="_add"></paper-icon-button>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <div>
                    @Html.ActionLink("Shutdown", "Shutdown")
                </div>
            </main>
        </xenon-photo-card>

        <xenon-dialog id="dialog" heading="Edit Integration Setting">
            <main>
                <paper-input type="password" value="{{setting.value}}"></paper-input>
                <template is="dom-if" if="[[errorMessage]]">
                    <div class="text-danger">[[errorMessage]]</div>
                </template>
            </main>
            <buttons>
                <paper-button on-click="_save">Save</paper-button>
                <paper-button on-click="_cancel">Cancel</paper-button>
            </buttons>
        </xenon-dialog>

        <paper-toast id="toast"></paper-toast>
    </template>
    <script>
        addEventListener('WebComponentsReady',
            function () {
                Polymer({
                    is: "page-module",
                    properties: {
                        setting: { type: Object, notify: true, value: {} },
                        errorMessage: { type: String, notify: true, value: "" },
                        inputType: { type: String, notify: true, value: "password" },
                        showAdd: { type: Boolean, notify: true, value: false },
                        hidePasswordInput: { type: Boolean, notify: true, value: false },
                    },
                    listeners: {
                        "settingsLoaded": "_onSettingNamesLoaded",
                        "settingSelected": "_onSettingNameSelected"
                    },
                    _openEditor: function (e) {
                        this.$.dialog.open();
                    },
                    _maskedValue: function (setting) {
                        console.log("_maskedValue", setting);
                        if (setting.key.includes("Authentication")) {
                            return "************";
                        } else {
                            return setting.key;
                        }
                    },
                    _changeInputType: function (settingName) {
                        if (settingName == undefined || settingName === '') {
                            return;
                        }

                        this.set("setting.key", settingName);
                        this.set("setting.value", "");
                        this.set("hidePasswordInput", true);

                        if (settingName.includes("Authentication")) {
                            this.set("inputType", "password");
                            console.log('inputType', this.inputType);
                            return;
                        }
                        this.set("inputType", "text");
                        this.set("hidePasswordInput", false);
                    },
                    _onSettingNamesLoaded: function (e) {
                        this._changeInputType(e.detail);
                    },
                    _onSettingNameSelected: function (e) {
                        this._changeInputType(e.detail);
                    },
                    _save: function (e) {
                        this.$.putSetting.url = "/api/configuration/" + this.setting.id;
                        this.$.putSetting.body = JSON.stringify(this.setting);
                        this.$.putSetting.generateRequest();
                    },
                    _cancel: function () {
                        this.set("setting.value", "");
                        this.$.dialog.close();
                    },
                    _delete: function (e) {
                        this.$.deleteSetting.url = "/api/configuration/" + e.model.item.id;
                        this.$.deleteSetting.generateRequest();
                    },
                    _add: function () {
                        if (this.setting.value === "") {
                            this._showToast("specify value");
                            return;
                        }
                        console.log(this.setting);

                        this.$.addSetting.body = JSON.stringify(this.setting);
                        this.$.addSetting.generateRequest();
                    },
                    _refresh: function () {
                        this.$.ajax.generateRequest();
                    },
                    _showToast: function (message) {
                        this.$.toast.text = message;
                        this.$.toast.show();
                    },
                    _onCreate: function () {
                        this._showToast("Setting added");
                        this._refresh();
                    },
                    _onUpdate: function () {
                        this.$.dialog.close();
                        this._showToast("Setting updated");
                        this._refresh();
                    },
                    _onDelete: function () {
                        this._showToast("Setting deleted");
                        this._refresh();
                    },
                    _onError: function (e) {
                        this.$.toast.text = "ERROR: " + e.detail.request.xhr.response;
                        this.$.toast.show();

                        //this.set("errorMessage", e.detail.request.xhr.response);
                    },
                    ready: function () {
                    }
                });
            })
    </script>
</dom-module>

<page-module></page-module>