@{
    ViewData["Title"] = "Chat";
}

<script src="~/lib/signalr/dist/browser/signalr.js"></script>

<link rel="import" href="/components/xenon-photo-card/xenon-photo-card.html" />
<link rel="import" href="/components/paper-toast/paper-toast.html" />
<link rel="import" href="/components/iron-form/iron-form.html" />
<link rel="import" href="/components/paper-input/paper-input.html" />
<link rel="import" href="/components/paper-button/paper-button.html" />

<dom-module id="page-module">
    <template>
        <xenon-photo-card heading="@ViewData["Title"]">
            <main>
                <form id="form" is="iron-form">
                    <div class="form-row">
                        <paper-input style="max-width: 20%; padding-right: 10px;" label="Author" value="{{message.author}}"></paper-input>
                        <paper-input style="flex: 1 1 0;" label="Message" value="{{message.message}}"></paper-input>
                        <paper-button class="primary" on-tap="_send">Send</paper-button>
                        <paper-button on-tap="_directSend">Direct</paper-button>
                        <paper-button on-tap="_sendTest">Test</paper-button>
                    </div>
                </form>
                <hr />
                <h4>Messages:</h4>
                <rambler-chat show-date></rambler-chat>
            </main>
        </xenon-photo-card>
        <paper-toast id="toast"></paper-toast>
    </template>
    <script>
        addEventListener('WebComponentsReady',
            function () {

                Polymer({
                    is: "page-module",
                    properties: {
                        messages: { Type: Array, notify: true, value: [] },
                        message: { Type: Object, value: {} },
                        connection: { Type: Object }
                    },
                    observers: [
                        "_onMessagesChanged(messages)"
                    ],
                    _send: function () {
                        console.log("SendMessage", this.message.author, this.message.message);
                        this.connection.invoke("SendMessage", this.message.author, this.message.message)
                            .catch(function (err) {
                                return console.error(err.toString());
                            });
                    },
                    _directSend: function () {
                        console.log("DirectMessage", this.message.author, this.message.message);
                        this.connection.invoke("DirectMessage", this.message.author, this.message.message)
                            .catch(function (err) {
                                return console.error(err.toString());
                            });
                    },
                    _sendTest: function () {
                        this.connection.invoke("TestMessage")
                            .catch(function (err) {
                                return console.error(err.toString());
                            });
                    },
                    _onMessageReceived: function (author, message) {
                        console.log("received: author", author, "message", message, "messages");

                        if (!author) return;
                        if (!message) return;

                        var msg = { "author": author, "message": message };
                        this.push("messages", msg);
                        console.log("messages:", this.messages);
                    },
                    _onMessagesChanged: function () {
                        console.log("_onMessagesChanged");
                    },
                    ready: function () {
                        var that = this;
                        this.connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

                        this.connection.on("ReceiveMessage",
                            function (message) {
                                console.log("ReceiveMessage", message);
                                that._onMessageReceived(author, message);
                            });

                        this.connection.on("ReceiveTestMessage",
                            function (message) {
                                console.log("ReceiveTestMessage", message);
                                that._onMessageReceived(author, message);
                            });

                        this.connection.start().catch(function (err) {
                            return console.error(err.toString());
                        });
                    }
                });

            })
    </script>
</dom-module>

<page-module></page-module>